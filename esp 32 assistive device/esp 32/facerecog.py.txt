from flask import Flask, request, jsonify
import face_recognition
import cv2
import numpy as np
import pickle
import os
from gtts import gTTS
import pygame
import time

app = Flask(_name_)

# Load or create face database
FACE_DB = "face_db.pkl"
known_face_encodings = []
known_face_names = []

if os.path.exists(FACE_DB):
    with open(FACE_DB, "rb") as f:
        known_face_encodings, known_face_names = pickle.load(f)

@app.route('/recognize', methods=['POST'])
def recognize_face():
    if 'image' not in request.files:
        return jsonify({'error': 'No image provided'}), 400
    
    image_file = request.files['image']
    img_bytes = image_file.read()
    
    # Convert bytes to numpy array
    nparr = np.frombuffer(img_bytes, np.uint8)
    img = cv2.imdecode(nparr, cv2.IMREAD_COLOR)
    rgb_img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
    
    # Find all face locations and encodings
    face_locations = face_recognition.face_locations(rgb_img)
    face_encodings = face_recognition.face_encodings(rgb_img, face_locations)
    
    recognized_names = []
    
    for face_encoding in face_encodings:
        # Compare with known faces
        matches = face_recognition.compare_faces(known_face_encodings, face_encoding)
        name = "Unknown"
        
        # Find the best match
        face_distances = face_recognition.face_distance(known_face_encodings, face_encoding)
        best_match_index = np.argmin(face_distances)
        if matches[best_match_index]:
            name = known_face_names[best_match_index]
        
        recognized_names.append(name)
    
    # Announce recognition
    if recognized_names:
        announcement = "I see " + ", ".join(recognized_names) if len(recognized_names) > 1 else f"I see {recognized_names[0]}"
        text_to_speech(announcement)
    
    return jsonify({'recognized': recognized_names})

@app.route('/register', methods=['POST'])
def register_face():
    name = request.form.get('name')
    if not name:
        return jsonify({'error': 'No name provided'}), 400
    
    if 'image' not in request.files:
        return jsonify({'error': 'No image provided'}), 400
    
    image_file = request.files['image']
    img_bytes = image_file.read()
    
    # Convert bytes to numpy array
    nparr = np.frombuffer(img_bytes, np.uint8)
    img = cv2.imdecode(nparr, cv2.IMREAD_COLOR)
    rgb_img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
    
    # Get face encodings
    face_encodings = face_recognition.face_encodings(rgb_img)
    
    if len(face_encodings) == 0:
        return jsonify({'error': 'No face detected'}), 400
    
    # Add to known faces
    known_face_encodings.append(face_encodings[0])
    known_face_names.append(name)
    
    # Save database
    with open(FACE_DB, "wb") as f:
        pickle.dump((known_face_encodings, known_face_names), f)
    
    text_to_speech(f"I've learned what {name} looks like")
    return jsonify({'success': True, 'name': name})

def text_to_speech(text):
    tts = gTTS(text=text, lang='en')
    tts.save("temp.mp3")
    
    pygame.mixer.init()
    pygame.mixer.music.load("temp.mp3")
    pygame.mixer.music.play()
    while pygame.mixer.music.get_busy():
        time.sleep(0.1)

if _name_ == '_main_':
    app.run(host='0.0.0.0', port=5000)